var documenterSearchIndex = {"docs":
[{"location":"library/function_index/#ovc_func_index","page":"Function index","title":"Function index","text":"","category":"section"},{"location":"library/function_index/#OceanRasterConversions-exported-functions","page":"Function index","title":"OceanRasterConversions exported functions","text":"","category":"section"},{"location":"library/function_index/","page":"Function index","title":"Function index","text":"Modules = [OceanRasterConversions]\nPrivate = false","category":"page"},{"location":"library/function_index/#OceanRasterConversions.OceanRasterConversions","page":"Function index","title":"OceanRasterConversions.OceanRasterConversions","text":"Module to convert variables depth, practical salinity and potential temperature to the TEOS-10 standard variables pressure, absolute salinity and conservative temperature (respectively) from a Raster, RasterStack  or RasterSeries. A few chosen seawater variables can then be computed from these state variables.\n\n\n\n\n\n","category":"module"},{"location":"library/function_index/#OceanRasterConversions.Sₚ_to_Sₐ-Tuple{Rasters.Raster, Rasters.Raster, Tuple, Rasters.Raster}","page":"Function index","title":"OceanRasterConversions.Sₚ_to_Sₐ","text":"function Sₚ_to_Sₐ(Sₚ::Raster)\nfunction Sₚ_to_Sₐ(stack::RasterStack, Sₚ::Symbol)\nfunction Sₚ_to_Sₐ(series::RasterSeries, Sₚ::Symbol)\n\nConvert a Raster of practical salinity (Sₚ) to absolute salinity (Sₐ) using gsw_sa_from_sp from GibbsSeaWater.jl. This conversion depends on pressure. If converting from a RasterStack or RasterSeries, the symbol for the practical salinity in the RasterStack/Series must be passed in as a Symbol –-  that is if the variable name is SALT the RasterStack/Series, the Symbol :SALT must be passed in.\n\n\n\n\n\n","category":"method"},{"location":"library/function_index/#OceanRasterConversions.convert_ocean_vars-Tuple{Rasters.RasterStack, NamedTuple}","page":"Function index","title":"OceanRasterConversions.convert_ocean_vars","text":"function convert_ocean_vars(raster::RasterStack, var_names::NamedTuple;\n                            ref_pressure = nothing,\n                            with_α = false,\n                            with_β = false)\nfunction convert_ocean_vars(raster::Rasterseries, var_names::NamedTuple;\n                            ref_pressure = nothing,\n                            with_α = false,\n                            with_β = false)\n\nConvert ocean variables depth, practical salinity and potential temperature to pressure, absolute salinity and conservative temperature. All conversions are done using the julia implementation of TEOS-10 GibbsSeaWater.jl. A new Raster is returned that contains the variables pressure, absolute salinity, conservative temperature and density (either in-situ or referenced to a user defined reference pressure). As pressure depends on latitude and depth, it is added as a new variable –- that is, each longitude, latitude, depth and time have a variable for pressure. A density variable is also computed which, by default, is in-situ density. Potential density at a reference pressure can be computed instead by passing a the keyword argument ref_pressure. Optional keyword arguments with_α and with_β allow the thermal expansion and haline contraction coefficients (respectively) to be computed and added to the returned RasterStack/Series.\n\nThe name of the variables for potential temperature and practical salinity must be passed in as a NamedTuple of the form (Sₚ = :salt_name, θ = :potential_temp_name) where :potential_temp_name and :salt_name are the name of the potential temperature and practical salinity in the Raster.\n\n\n\n\n\n","category":"method"},{"location":"library/function_index/#OceanRasterConversions.depth_to_pressure-Tuple{Rasters.Raster, Tuple}","page":"Function index","title":"OceanRasterConversions.depth_to_pressure","text":"function depth_to_pressure(raster::Raster)\nfunction depth_to_pressure(stack::RasterStack)\n\nConvert the depth dimension (Z) to pressure using gsw_p_from_z  from GibbsSeaWater.jl. Note that pressure depends on depth and latitude so the returned pressure is stored as a variable in the resulting Raster rather than replacing the vertical depth dimension.\n\n\n\n\n\n","category":"method"},{"location":"library/function_index/#OceanRasterConversions.get_α-NTuple{4, Rasters.Raster}","page":"Function index","title":"OceanRasterConversions.get_α","text":"function get_α(Sₐ::Raster, Θ::Raster, p::Raster)\nfunction get_α(stack::RasterStack, var_names::NamedTuple)\nfunction get_α(series::RasterSeries, var_names::NamedTuple)\n\nCompute the thermal exapnsion coefficient, α, using gsw_alpha from GibbsSeaWater.jl. To compute α from a RasterStack or RasterSeries the variable names must be passed into the function as a NamedTuple in the form (Sₐ = :salt_var, Θ = :temp_var, p = :pressure_var). The returned Raster will have the same dimensions as Rasterstack that is passed in.\n\n\n\n\n\n","category":"method"},{"location":"library/function_index/#OceanRasterConversions.get_β-NTuple{4, Rasters.Raster}","page":"Function index","title":"OceanRasterConversions.get_β","text":"function get_β(Sₐ::Raster, Θ::Raster, p::Raster)\nfunction get_β(stack::RasterStack, var_names::NamedTuple)\nfunction get_β(series::RasterSeries, var_names::NamedTuple)\n\nCompute the haline contraction coefficient, β, using gsw_beta from GibbsSeaWater.jl. To compute β from a RasterStack or RasterSeries the variable names must be passed into the function as a NamedTuple in the form (Sₐ = :salt_var, Θ = :temp_var, p = :pressure_var). The returned Raster will have the same dimensions as Rasterstack that is passed in.\n\n\n\n\n\n","category":"method"},{"location":"library/function_index/#OceanRasterConversions.get_ρ-NTuple{4, Rasters.Raster}","page":"Function index","title":"OceanRasterConversions.get_ρ","text":"function get_ρ(Sₐ::Raster, Θ::Raster, p::Raster)\nfunction get_ρ(stack::RasterStack, var_names::NamedTuple)\nfunction get_ρ(series::RasterStack, var_names::NamedTuple)\n\nCompute in-situ density, ρ, using gsw_rho from GibbsSeaWater.jl. This computation depends on absolute salinity (Sₐ), conservative temperature (Θ) and pressure (p). To compute ρ from a RasterStack or RasterSeries the variable names must be passed into the function as a NamedTuple in the form (Sₐ = :salt_var, Θ = :temp_var, p = :pressure_var). The returned Raster will have the same dimensions as Rasterstack that is passed in.\n\n\n\n\n\n","category":"method"},{"location":"library/function_index/#OceanRasterConversions.get_σₚ-Tuple{Rasters.Raster, Rasters.Raster, Number, Rasters.Raster}","page":"Function index","title":"OceanRasterConversions.get_σₚ","text":"function get_σₚ(Sₐ::Raster, Θ::Raster, p::Number)\nfunction get_σₚ(stack::RasterStack, var_names::NamedTuple)\nfunction get_σₚ(series::RasterStack, var_names::NamedTuple)\n\nCompute potential density at reference pressure p, σₚ, using gsw_rho from GibbsSeaWater.jl. This computation depends on absolute salinity (Sₐ), conservative temperature (Θ) and a user entered reference pressure (p). Compute and return the potential density σₚ at reference pressure p from a RasterStack or RasterSeries. This computation depends on absolute salinity Sₐ, conservative temperature Θ and a reference pressure p. The variable names must be passed into the function as a NamedTuple in the form (Sₐ = :salt_var, Θ = :temp_var, p = ref_pressure). Note p in this case is a number. The returned Raster will have the same dimensions as Rasterstack that is passed in.\n\n\n\n\n\n","category":"method"},{"location":"library/function_index/#OceanRasterConversions.θ_to_Θ-Tuple{Rasters.Raster, Rasters.Raster, Tuple, Rasters.Raster}","page":"Function index","title":"OceanRasterConversions.θ_to_Θ","text":"function θ_to_Θ(θ::Raster, Sₐ::Raster)\nfunction θ_to_Θ(stack::RasterStack, var_names::NamedTuple)\nfunction θ_to_Θ(series::RasterSeries, var_names::NamedTuple)\n\nConvert a Raster of potential temperature (θ) to conservative temperature (Θ) using gsw_ct_from_pt  from GibbsSeaWater.jl. This conversion depends on absolute salinity. If converting from a  from a RasterStack or a RasterSeries, the var_names must be passed in as for convert_ocean_vars –-  that is, as a named tuple in the form (Sₚ = :salt_name, θ = :potential_temp_name) where :potential_temp_name and :salt_name are the name of the potential temperature and salinity in the RasterStack.\n\n\n\n\n\n","category":"method"},{"location":"library/function_index/#OceanRasterConversions-private-functions","page":"Function index","title":"OceanRasterConversions private functions","text":"","category":"section"},{"location":"library/function_index/","page":"Function index","title":"Function index","text":"Modules = [OceanRasterConversions]\nPublic = false","category":"page"},{"location":"library/function_index/#OceanRasterConversions.get_dims-Tuple{Rasters.Raster}","page":"Function index","title":"OceanRasterConversions.get_dims","text":"function get_dims(raster::Raster)\n\nGet the dimensions of a Raster.\n\n\n\n\n\n","category":"method"},{"location":"modules/OceanVariableConversions/#ocean_conv_vars_module","page":"OceanVariableConversions","title":"Converting Ocean Variables","text":"","category":"section"},{"location":"modules/OceanVariableConversions/#Package-workings","page":"OceanVariableConversions","title":"Package workings","text":"","category":"section"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"This package will convert the variables practical salinity and potential temperature into absolute salinity and conservative temperature. In doing so a pressure variable is needed, so this is created and returned in the RasterStack. A density variable (either in-situ or potential referenced to a user input) is computed and added to the RasterStack. See the example for how the module can be used.","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"info: Info\nThe only dimension names that are supported are X, Y, Z, and Ti. Allowing for user specified dimensions has not yet been implemented.","category":"page"},{"location":"modules/OceanVariableConversions/#Variables","page":"OceanVariableConversions","title":"Variables","text":"","category":"section"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"The variables are named using the symbols that represent them. The symbols are unicode characters which can be generated in the julia repl by pressing tab after the varible","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"julia> \\theta#press tab","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"will autocomplete to θ, the symbol for potential temperature. The subscript letters that are used to distinguish between practical salinity, Sₚ, and absolute salinity, Sₐ, are also added in the julia repl","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"julia> S\\_a#press tab","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"Currently the varabile symbols are:","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"θ potential temperature\nΘ conservative temperature\nSₚ practical salinity\nSₐ absolute salinity\np pressure\nρ in-situ seawater density\nσₚ potential density at user defined reference pressure ₚ\nα thermal expansion coefficient\nβ haline contraction coefficient.","category":"page"},{"location":"modules/OceanVariableConversions/#Limitations","page":"OceanVariableConversions","title":"Limitations","text":"","category":"section"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"If the required dimensions for the conversions are not present an error will be thrown. For example, trying to convert a RasterStack that has no depth dimension will not work as the Z dimension is not found and the pressure variable depends on depth. There is a manual workaround for this. When defining the RasterStack add the Z dimension as a single entry, rather than a Vector,","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"lons, lats, z = -180:180, -90:90, 0.0\nstack = RasterStack(data, (X(lons), Y(lats), Z(z)))","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"This is equivalent to a two dimensional RasterStack at sea-surface height (z = 0).","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"At this stage it is also not possible to slice a Raster then convert it. This is something that will be implemented at some stage. For details on why this is the case see this issue. As the example shows it is straightforward to first convert a Raster and then slice it.","category":"page"},{"location":"modules/OceanVariableConversions/","page":"OceanVariableConversions","title":"OceanVariableConversions","text":"For a full list of the functions in this module see the function index or look at the example to see the module in action.","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"EditURL = \"../../../examples/ocean_variable_conversion.jl\"","category":"page"},{"location":"literated/ocean_variable_conversion/#converting_variables_example","page":"Converting ocean variables","title":"Converting the practical salinity and potential temperature from ECCOv4r4 model output.","text":"","category":"section"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"First, add the required dependencies","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"using Rasters, NCDatasets, Plots, Downloads\nusing OceanRasterConversions","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"and download model output from ECCOv4r4 [1], [2], [3]. This data is the daily average 0.5 degree salinity and temperature model output. To reproduce this example, an Earthdata acount is needed to download the data.","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"info: Info\nSee the NCDatasets.jl example for information on how to download data from NASA EarthData.","category":"page"},{"location":"literated/ocean_variable_conversion/#Read-the-data-into-a-RasterStack","page":"Converting ocean variables","title":"Read the data into a RasterStack","text":"","category":"section"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"function download_ECCO()\n\n    try\n        Downloads.download(\"https://opendap.earthdata.nasa.gov/providers/POCLOUD/collections/ECCO%2520Ocean%2520Temperature%2520and%2520Salinity%2520-%2520Daily%2520Mean%25200.5%2520Degree%2520(Version%25204%2520Release%25204)/granules/OCEAN_TEMPERATURE_SALINITY_day_mean_2007-01-01_ECCO_V4r4_latlon_0p50deg.dap.nc4\", \"ECCO_data.nc\")\n    catch\n        @info \"dowloading from drive\"\n        Downloads.download(\"https://drive.google.com/uc?id=1MNeThunqpY-nFzsZLZj9BV8sM5BJgnxT&export=download\", \"ECCO_data.nc\")\n    end\n\n    return nothing\n\nend\ndownload_ECCO()\nstack = RasterStack(\"ECCO_data.nc\")","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"Thanks to Rasters.jl we now have the dimensions of the data, the variables saved as layers and all the metadata in one data structure. From the metadata we can get a summary of the data which tells us more about the data","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"metadata(stack)[\"summary\"]","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"This tells us that the temperature variable is potential temperature and the salt variabile is practical salinity (for more information about this data see the user guide).","category":"page"},{"location":"literated/ocean_variable_conversion/#Converting-all-variables-and-plotting","page":"Converting ocean variables","title":"Converting all variables and plotting","text":"","category":"section"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"To calculate seawater density using TEOS-10, we require absolute salinity, conservative temperature and pressure. This can be done by extracting the data and using GibbsSeaWater.jl or with this package,","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"converted_stack = convert_ocean_vars(stack, (Sₚ = :SALT, θ = :THETA))","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"Note that this is a new RasterStack, so the metadata from the original RasterStack is not attached. As we have a returned RasterStack and plotting recipes have been written, we can, for example, look at the conservative temperature closest to the sea-surface (-5.0m)","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"contourf(converted_stack[:Θ][Z(Near(0.0)), Ti(1)]; size = (800, 500),\n         color = :balance, colorbar_title = \"ᵒC\")","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"We can also take slices of the data to look at depth-latitude plots of the returned variables (note by default the in-situ density ρ is computed and returned)","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"lon = 180\nvar_plots = plot(; layout = (4, 1), size = (1000, 1000))\nfor (i, key) ∈ enumerate(keys(converted_stack))\n    contourf!(var_plots[i], converted_stack[key][X(Near(lon))])\nend\nvar_plots","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"As this is a RasterStack all methods exported by Rasters.jl will work. See the documentation for Rasters.jl for more information.","category":"page"},{"location":"literated/ocean_variable_conversion/#Converting-chosen-variables","page":"Converting ocean variables","title":"Converting chosen variables","text":"","category":"section"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"It is also possible to convert only chosen variables from a RasterStack. If we just want to look at conservative temperature - absolute salinity vertical profiles, we can convert the practical salinity and potential temperature then extract vertical profiles and compute the potential density referenced to 0dbar","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"Sₐ = Sₚ_to_Sₐ(stack, :SALT)\nΘ = θ_to_Θ(stack, (Sₚ = :SALT, θ = :THETA))\nlon, lat = -100.0, -70.0\nSₐ_profile, Θ_profile = Sₐ[X(Near(lon)), Y(Near(lat)), Ti(1)],\n                         Θ[X(Near(lon)), Y(Near(lat)), Ti(1)]\nσ₀_profile = get_σₚ(Sₐ_profile, Θ_profile, 0)\nprofile_plots = plot(; layout = (2, 2), size = (800, 800))\nplot!(profile_plots[1, 1], Sₐ_profile;\n      title = \"Sₐ-depth\", xmirror = true, xlabel = \"Sₐ (g/kg)\")\nplot!(profile_plots[1, 2], Θ_profile;\n      title = \"Θ-depth\", xmirror = true, xlabel = \"Θ (ᵒC)\")\nplot!(profile_plots[2, 1], Sₐ_profile, Θ_profile;\n      xlabel = \"Sₐ (g/kg)\", ylabel = \"Θ (ᵒC)\", label = false, title = \"Sₐ-Θ\")\nplot!(profile_plots[2, 2], σ₀_profile;\n      title = \"σ₀-depth\", xmirror = true, xlabel = \"σ₀ (kgm⁻³)\")","category":"page"},{"location":"literated/ocean_variable_conversion/#Plotting-with-[GeoMakie.jl](https://github.com/MakieOrg/GeoMakie.jl)","page":"Converting ocean variables","title":"Plotting with GeoMakie.jl","text":"","category":"section"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"Rasters.jl also supports plotting with Makie.jl as of version 0.5.3. If using an older version we can write a method for convert_arguments to convert a Raster into a format that can be plotted by Makie.jl. For more information on implementing type recipes for plotting custom types in Makie.jl see the Makie.jl plot recipes documentation. The convert_arguments method extracts the longitude and latitude dims from a Raster as well as the values for the chosen variable. The SurfaceLike argument converts the data so we can use the contourf, heatmap or other SurfaceLike plotting functions.","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"using GeoMakie, CairoMakie\n\nfunction Makie.convert_arguments(P::SurfaceLike, rs::Raster)\n\n    lon, lat = collect(lookup(rs, X)), collect(lookup(rs, Y))\n    plot_var = Matrix(rs[:, :])\n\n    return convert_arguments(P, lon, lat, plot_var)\n\nend","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"info: convert_arguments method\nThis is a specific method for convert_arguments written for this data. To plot different data (or other parts of this data, e.g. depth-latitude) that are in Raster data structures, more methods need to be added to convert_arguments that extract the desired parts of the Raster.","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"Now we can plot a Raster onto a GeoAxis and take advantage of the extra features GeoMakie.jl offers, like map projections (see the GeoMakie.jl documentation for more information about available projections and how to set them), automatic axis limits and coastlines.","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"date = lookup(converted_stack, Ti)[1] # get the date from the `Raster`\ndepth = 0.0                           # choose a depth to look at the ocean temperature\nfig = Figure(size = (800, 500))\nax = GeoAxis(fig[1, 1];\n             xlabel = \"Longitude\",\n             ylabel = \"Latitude\",\n             title = \"Ocean conservative temperature at depth $(depth)m\",\n             subtitle = \"$date\",\n             coastlines = true)\ncp = CairoMakie.contourf!(ax, converted_stack[:Θ][Z(Near(depth)), Ti(At(date))];\n                          colormap = :balance)\nColorbar(fig[2, 1], cp; label = \"Θ (ᵒC)\", vertical = false, flipaxis = false)\nfig","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"","category":"page"},{"location":"literated/ocean_variable_conversion/","page":"Converting ocean variables","title":"Converting ocean variables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#OceanRasterConversions.jl-documentation","page":"Home","title":"OceanRasterConversions.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Rasters.jl provides excellent methods for reading, analysing and plotting for geospatial data. This package contains modules that are useful for analysing oceanic data (either model output or gridded observations) and is designed to be used in conjunction with Rasters.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"OceanRasterConversions.jl converts and computes ocean varaibles that are saved as Raster data structures using GibbsSeaWater.jl. Typically, the salt and temperature variables from ocean models or observational data are practical salinity and potential temperature so conversions must be to the TEOS-10 standard variables of absolute salinity and conservative temperature to accurately calculate further variables like seawater density. Further conversions and other water mass transformation procedures will be added in the future.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If there are any bugs and/or feature request please raise an issue on the GitHub page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Info\nThis package assumes that the missingval = missing in the Raster, RasterStack or RasterSeries. By default missingval = missing in Rasters.jl, so as long as the missingval has not been changed the modules in this package will work.","category":"page"}]
}
